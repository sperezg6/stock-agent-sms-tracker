name: Deploy Agent Stock Tracker Lambda Function to AWS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Agent Stock Tracker Lambda Function
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          npm ci
          npm install -g aws-cdk
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Bootstrap CDK (if needed)
        run: |
          # Check if bootstrap stack exists
          if ! aws cloudformation describe-stacks --stack-name CDKToolkit --region us-east-1 2>/dev/null; then
            echo "Bootstrapping CDK..."
            cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/us-east-1
          else
            echo "CDK already bootstrapped"
          fi
      
      - name: Run CDK Synth
        run: cdk synth
      
      - name: Run CDK Diff
        run: cdk diff
        continue-on-error: true
      
      - name: Deploy to AWS
        run: cdk deploy --require-approval never --all \
            --context twilioAccountSid="${{ secrets.TWILIO_ACCOUNT_SID }}" \
            --context twilioAuthToken="${{ secrets.TWILIO_AUTH_TOKEN }}" \
            --context toPhoneNumber="${{ secrets.TO_PHONE_NUMBER }}" \
            --context fromPhoneNumber="${{ secrets.FROM_PHONE_NUMBER }}" \
            --context finnhubApiKey="${{ secrets.FINNHUB_API_KEY }}" \
            --context openaiApiKey="${{ secrets.OPENAI_API_KEY }}"
        env:
          GITHUB_ACTIONS: true
      
      - name: Get Lambda Function URL
        run: |
          echo "Lambda Function deployed successfully!"
          aws lambda get-function --function-name test-hello-world-lambda --query 'Configuration.FunctionArn' --output text
      
      - name: Test Lambda Function
        run: |
          echo "Testing Lambda function..."
          aws lambda invoke \
            --function-name test-hello-world-lambda \
            --payload '{"queryStringParameters": {"name": "GitHub Actions"}}' \
            response.json
          cat response.json
          echo ""